{"metadata":{"name":"SQL_dataFrames","user_save_timestamp":"1970-01-01T00:00:00.000Z","auto_save_timestamp":"1970-01-01T00:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"44C1088AF748494F809D994D071F1912"},"cell_type":"code","source":"import org.apache.spark.sql.types._\nimport org.apache.spark.sql.{DataFrame, Dataset, Row, SparkSession}\nimport org.apache.spark.sql.functions._\n\n// customized schema, basically add (column names, column type)\nval recordSchema = new StructType().add(\"sample\", \"long\")\n                                   .add(\"cThick\", \"integer\")\n                                   .add(\"uCSize\", \"integer\")\n                                   .add(\"uCShape\", \"integer\")\n                                   .add(\"mAdhes\", \"integer\")\n                                   .add(\"sECSize\", \"integer\")\n                                   .add(\"bNuc\", \"integer\")\n                                   .add(\"bChrom\", \"integer\")\n                                   .add(\"nNuc\", \"integer\")\n                                   .add(\"mitosis\", \"integer\")\n                                   .add(\"clas\", \"integer\")\n  ","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.sql.types._\nimport org.apache.spark.sql.{DataFrame, Dataset, Row, SparkSession}\nimport org.apache.spark.sql.functions._\nrecordSchema: org.apache.spark.sql.types.StructType = StructType(StructField(sample,LongType,true), StructField(cThick,IntegerType,true), StructField(uCSize,IntegerType,true), StructField(uCShape,IntegerType,true), StructField(mAdhes,IntegerType,true), StructField(sECSize,IntegerType,true), StructField(bNuc,IntegerType,true), StructField(bChrom,IntegerType,true), StructField(nNuc,IntegerType,true), StructField(mitosis,IntegerType,true), StructField(clas,IntegerType,true))\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":31,"time":"Took: 926 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F16D966608A843EC847333CE9E0535B1"},"cell_type":"code","source":"val spark = SparkSession.builder\n      .appName(\"sql_sparksession\")\n      .getOrCreate","outputs":[{"name":"stdout","output_type":"stream","text":"spark: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@13500dca\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":32,"time":"Took: 472 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"F85DD592430B4E0386D6F705DEA78A15"},"cell_type":"code","source":"val df = spark.read.format(\"csv\")\n                   .option(\"header\", false)\n                   .schema(recordSchema)\n                   .load(\"breast-cancer-wisconsin.data\")","outputs":[{"name":"stdout","output_type":"stream","text":"df: org.apache.spark.sql.DataFrame = [sample: bigint, cThick: int ... 9 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":33,"time":"Took: 464 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"81721F28AF3D470A8183CBAEBE006712"},"cell_type":"code","source":"df.show()","outputs":[{"name":"stdout","output_type":"stream","text":"+-------+------+------+-------+------+-------+----+------+----+-------+----+\n| sample|cThick|uCSize|uCShape|mAdhes|sECSize|bNuc|bChrom|nNuc|mitosis|clas|\n+-------+------+------+-------+------+-------+----+------+----+-------+----+\n|1000025|     5|     1|      1|     1|      2|   1|     3|   1|      1|   2|\n|1002945|     5|     4|      4|     5|      7|  10|     3|   2|      1|   2|\n|1015425|     3|     1|      1|     1|      2|   2|     3|   1|      1|   2|\n|1016277|     6|     8|      8|     1|      3|   4|     3|   7|      1|   2|\n|1017023|     4|     1|      1|     3|      2|   1|     3|   1|      1|   2|\n|1017122|     8|    10|     10|     8|      7|  10|     9|   7|      1|   4|\n|1018099|     1|     1|      1|     1|      2|  10|     3|   1|      1|   2|\n|1018561|     2|     1|      2|     1|      2|   1|     3|   1|      1|   2|\n|1033078|     2|     1|      1|     1|      2|   1|     1|   1|      5|   2|\n|1033078|     4|     2|      1|     1|      2|   1|     2|   1|      1|   2|\n|1035283|     1|     1|      1|     1|      1|   1|     3|   1|      1|   2|\n|1036172|     2|     1|      1|     1|      2|   1|     2|   1|      1|   2|\n|1041801|     5|     3|      3|     3|      2|   3|     4|   4|      1|   4|\n|1043999|     1|     1|      1|     1|      2|   3|     3|   1|      1|   2|\n|1044572|     8|     7|      5|    10|      7|   9|     5|   5|      4|   4|\n|1047630|     7|     4|      6|     4|      6|   1|     4|   3|      1|   4|\n|1048672|     4|     1|      1|     1|      2|   1|     2|   1|      1|   2|\n|1049815|     4|     1|      1|     1|      2|   1|     3|   1|      1|   2|\n|1050670|    10|     7|      7|     6|      4|  10|     4|   1|      2|   4|\n|1050718|     6|     1|      1|     1|      2|   1|     3|   1|      1|   2|\n+-------+------+------+-------+------+-------+----+------+----+-------+----+\nonly showing top 20 rows\n\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":60,"time":"Took: 662 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"D2BF74DD046043B29F4D798184B80632"},"cell_type":"code","source":"df.createOrReplaceTempView(\"cancerTable\")","outputs":[{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":35,"time":"Took: 598 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"1D2084FFC3A24DDB9D6C2F21D7EFD7D4"},"cell_type":"code","source":"val sqlDF=spark.sql(\"select sample, bNuc from cancerTable\")\nsqlDF.show()","outputs":[{"name":"stdout","output_type":"stream","text":"+-------+----+\n| sample|bNuc|\n+-------+----+\n|1000025|   1|\n|1002945|  10|\n|1015425|   2|\n|1016277|   4|\n|1017023|   1|\n|1017122|  10|\n|1018099|  10|\n|1018561|   1|\n|1033078|   1|\n|1033078|   1|\n|1035283|   1|\n|1036172|   1|\n|1041801|   3|\n|1043999|   3|\n|1044572|   9|\n|1047630|   1|\n|1048672|   1|\n|1049815|   1|\n|1050670|  10|\n|1050718|   1|\n+-------+----+\nonly showing top 20 rows\n\nsqlDF: org.apache.spark.sql.DataFrame = [sample: bigint, bNuc: int]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":36,"time":"Took: 704 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"5817655B2CBD428199E9AC364596F04B"},"cell_type":"code","source":"// create a case class\ncase class CancerClass(sample: Long, cThick: Int, uCSize: Int, uCShape: Int, mAdhes: Int, sECSize: Int, bNuc: Int, bChrom: Int, nNuc: Int, mitosis: Int, clas: Int)\n","outputs":[{"name":"stdout","output_type":"stream","text":"defined class CancerClass\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":37,"time":"Took: 330 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"425AD7921AD44CDF83510066CA16BC95"},"cell_type":"code","source":"sc","outputs":[{"name":"stdout","output_type":"stream","text":"res54: org.apache.spark.SparkContext = org.apache.spark.SparkContext@72561518\n"},{"metadata":{},"data":{"text/html":"org.apache.spark.SparkContext@72561518"},"data_list":{"application/svg+pngbase64":[]},"output_type":"execute_result","execution_count":38,"time":"Took: 429 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"3A20B3CEBDD54DD384A345794AEAF9E5"},"cell_type":"code","source":"val cancerRDD=sc.textFile(\"breast-cancer-wisconsin.data\")\n\nval cancerDS=cancerRDD.map(_.split(\".\"))\n        .map(x=>CancerClass(x(0).trim.toLong,\n                            x(1).trim.toInt, \n                            x(2).trim.toInt,\n                            x(3).trim.toInt,\n                            x(4).trim.toInt,\n                            x(5).trim.toInt,\n                            x(6).trim.toInt,\n                            x(7).trim.toInt,\n                            x(8).trim.toInt,\n                            x(9).trim.toInt,\n                            x(10).trim.toInt))\n        .toDS()","outputs":[{"name":"stdout","output_type":"stream","text":"cancerRDD: org.apache.spark.rdd.RDD[String] = breast-cancer-wisconsin.data MapPartitionsRDD[33] at textFile at <console>:89\ncancerDS: org.apache.spark.sql.Dataset[CancerClass] = [sample: bigint, cThick: int ... 9 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":39,"time":"Took: 665 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"81A4CF474C324FD780A1A0D230074FA1"},"cell_type":"code","source":"def binarize(s:Int):Int= s match {\n case 2=>0\n case 4=>1\n}","outputs":[{"name":"stdout","output_type":"stream","text":"binarize: (s: Int)Int\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":40,"time":"Took: 383 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"1FEB9EE2AF9146F38847701092AACA1E"},"cell_type":"code","source":"// udf: UserDefinedFunction\nspark.udf.register(\"udfValueToCategory\", (arg: Int) => binarize(arg))","outputs":[{"name":"stdout","output_type":"stream","text":"res58: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(IntegerType)))\n"},{"metadata":{},"data":{"text/html":"UserDefinedFunction(&lt;function1&gt;,IntegerType,Some(List(IntegerType)))"},"data_list":{"application/svg+pngbase64":[]},"output_type":"execute_result","execution_count":41,"time":"Took: 541 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"123249C9FF594A3DBE6838ABA26FD2C2"},"cell_type":"code","source":"// convert clas to binary factor, 2->0, 4->1\nval sqlUDF = spark.sql(\"SELECT *, udfValueToCategory(clas) from cancerTable\")","outputs":[{"name":"stdout","output_type":"stream","text":"sqlUDF: org.apache.spark.sql.DataFrame = [sample: bigint, cThick: int ... 10 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":42,"time":"Took: 384 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"78AE83D0A39C498887767BB5B044C45F"},"cell_type":"code","source":"sqlUDF.show()","outputs":[{"name":"stdout","output_type":"stream","text":"+-------+------+------+-------+------+-------+----+------+----+-------+----+----------------------------+\n| sample|cThick|uCSize|uCShape|mAdhes|sECSize|bNuc|bChrom|nNuc|mitosis|clas|UDF:udfValueToCategory(clas)|\n+-------+------+------+-------+------+-------+----+------+----+-------+----+----------------------------+\n|1000025|     5|     1|      1|     1|      2|   1|     3|   1|      1|   2|                           0|\n|1002945|     5|     4|      4|     5|      7|  10|     3|   2|      1|   2|                           0|\n|1015425|     3|     1|      1|     1|      2|   2|     3|   1|      1|   2|                           0|\n|1016277|     6|     8|      8|     1|      3|   4|     3|   7|      1|   2|                           0|\n|1017023|     4|     1|      1|     3|      2|   1|     3|   1|      1|   2|                           0|\n|1017122|     8|    10|     10|     8|      7|  10|     9|   7|      1|   4|                           1|\n|1018099|     1|     1|      1|     1|      2|  10|     3|   1|      1|   2|                           0|\n|1018561|     2|     1|      2|     1|      2|   1|     3|   1|      1|   2|                           0|\n|1033078|     2|     1|      1|     1|      2|   1|     1|   1|      5|   2|                           0|\n|1033078|     4|     2|      1|     1|      2|   1|     2|   1|      1|   2|                           0|\n|1035283|     1|     1|      1|     1|      1|   1|     3|   1|      1|   2|                           0|\n|1036172|     2|     1|      1|     1|      2|   1|     2|   1|      1|   2|                           0|\n|1041801|     5|     3|      3|     3|      2|   3|     4|   4|      1|   4|                           1|\n|1043999|     1|     1|      1|     1|      2|   3|     3|   1|      1|   2|                           0|\n|1044572|     8|     7|      5|    10|      7|   9|     5|   5|      4|   4|                           1|\n|1047630|     7|     4|      6|     4|      6|   1|     4|   3|      1|   4|                           1|\n|1048672|     4|     1|      1|     1|      2|   1|     2|   1|      1|   2|                           0|\n|1049815|     4|     1|      1|     1|      2|   1|     3|   1|      1|   2|                           0|\n|1050670|    10|     7|      7|     6|      4|  10|     4|   1|      2|   4|                           1|\n|1050718|     6|     1|      1|     1|      2|   1|     3|   1|      1|   2|                           0|\n+-------+------+------+-------+------+-------+----+------+----+-------+----+----------------------------+\nonly showing top 20 rows\n\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":43,"time":"Took: 830 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"8DEAD08D84C94149AA91AF29BC14E428"},"cell_type":"code","source":"sqlUDF.select(\"clas\", \"UDF:udfValueToCategory(clas)\").show()","outputs":[{"name":"stdout","output_type":"stream","text":"+----+----------------------------+\n|clas|UDF:udfValueToCategory(clas)|\n+----+----------------------------+\n|   2|                           0|\n|   2|                           0|\n|   2|                           0|\n|   2|                           0|\n|   2|                           0|\n|   4|                           1|\n|   2|                           0|\n|   2|                           0|\n|   2|                           0|\n|   2|                           0|\n|   2|                           0|\n|   2|                           0|\n|   4|                           1|\n|   2|                           0|\n|   4|                           1|\n|   4|                           1|\n|   2|                           0|\n|   2|                           0|\n|   4|                           1|\n|   2|                           0|\n+----+----------------------------+\nonly showing top 20 rows\n\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":44,"time":"Took: 681 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"id":"38C14F2E4C9C451285845A043765B73F"},"cell_type":"markdown","source":"## RDD\n\n> Partitions\n  - the number of RDD partitions defines the level of data fragmentation\n  - tune the number of partitions\n    - fewer partitions than active stages means the cluster could be under-utilized\n    - excessive number of partitions could impact the performance due to __higher disk and network I/O__\n    \n> Operations\n  - transformations: create a new Dataset from an existing one\n  - actions: return a value or result of a computation\n  \n> Persist (cache)\n  - by default, Spark persists RDDs in memory, but it can spill them to disk if sufficient RAM isn't available\n  - The in-memory storage of persistent RDDs can be in the of deserialized or serialized Java objects.\n    -  The deserialized option is faster, while the serialized option is more memory-efficient (but slower). "},{"metadata":{"id":"65D53103236843BE8CE7B8FB5B60312E"},"cell_type":"markdown","source":"## RDD -> DataFrame"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"C0AF1C0678B84A0E843C6E3C1F408D0D"},"cell_type":"code","source":"val cancerDF=cancerRDD.toDF()","outputs":[{"name":"stdout","output_type":"stream","text":"cancerDF: org.apache.spark.sql.DataFrame = [value: string]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":45,"time":"Took: 459 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"ADDF313E217E48D4A3355E8EA0D67DAD"},"cell_type":"code","source":"def row(line: List[String]): Row = { Row(line(0).toLong, line(1).toInt, line(2).toInt, line(3).toInt, line(4).toInt, line(5).toInt, line(6).toInt, line(7).toInt, line(8).toInt, line(9).toInt, line(10).toInt) }","outputs":[{"name":"stdout","output_type":"stream","text":"row: (line: List[String])org.apache.spark.sql.Row\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":46,"time":"Took: 389 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"529DC155DBD14B518614AA12E46BDD93"},"cell_type":"code","source":"val data = cancerRDD.map(_.split(\",\").to[List]).map(row)","outputs":[{"name":"stdout","output_type":"stream","text":"data: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = MapPartitionsRDD[43] at map at <console>:89\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":47,"time":"Took: 577 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"1AC7CD9D4AA649239D97FEC32B5B34F5"},"cell_type":"code","source":"val cancerDF = spark.createDataFrame(data, recordSchema)\ncancerDF.show()","outputs":[{"name":"stdout","output_type":"stream","text":"+-------+------+------+-------+------+-------+----+------+----+-------+----+\n| sample|cThick|uCSize|uCShape|mAdhes|sECSize|bNuc|bChrom|nNuc|mitosis|clas|\n+-------+------+------+-------+------+-------+----+------+----+-------+----+\n|1000025|     5|     1|      1|     1|      2|   1|     3|   1|      1|   2|\n|1002945|     5|     4|      4|     5|      7|  10|     3|   2|      1|   2|\n|1015425|     3|     1|      1|     1|      2|   2|     3|   1|      1|   2|\n|1016277|     6|     8|      8|     1|      3|   4|     3|   7|      1|   2|\n|1017023|     4|     1|      1|     3|      2|   1|     3|   1|      1|   2|\n|1017122|     8|    10|     10|     8|      7|  10|     9|   7|      1|   4|\n|1018099|     1|     1|      1|     1|      2|  10|     3|   1|      1|   2|\n|1018561|     2|     1|      2|     1|      2|   1|     3|   1|      1|   2|\n|1033078|     2|     1|      1|     1|      2|   1|     1|   1|      5|   2|\n|1033078|     4|     2|      1|     1|      2|   1|     2|   1|      1|   2|\n|1035283|     1|     1|      1|     1|      1|   1|     3|   1|      1|   2|\n|1036172|     2|     1|      1|     1|      2|   1|     2|   1|      1|   2|\n|1041801|     5|     3|      3|     3|      2|   3|     4|   4|      1|   4|\n|1043999|     1|     1|      1|     1|      2|   3|     3|   1|      1|   2|\n|1044572|     8|     7|      5|    10|      7|   9|     5|   5|      4|   4|\n|1047630|     7|     4|      6|     4|      6|   1|     4|   3|      1|   4|\n|1048672|     4|     1|      1|     1|      2|   1|     2|   1|      1|   2|\n|1049815|     4|     1|      1|     1|      2|   1|     3|   1|      1|   2|\n|1050670|    10|     7|      7|     6|      4|  10|     4|   1|      2|   4|\n|1050718|     6|     1|      1|     1|      2|   1|     3|   1|      1|   2|\n+-------+------+------+-------+------+-------+----+------+----+-------+----+\nonly showing top 20 rows\n\ncancerDF: org.apache.spark.sql.DataFrame = [sample: bigint, cThick: int ... 9 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":48,"time":"Took: 911 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"246AE914A8E1455EAD0B2911B0EA2EC7"},"cell_type":"code","source":"val cancerDS = cancerDF.as[CancerClass]","outputs":[{"name":"stdout","output_type":"stream","text":"cancerDS: org.apache.spark.sql.Dataset[CancerClass] = [sample: bigint, cThick: int ... 9 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":49,"time":"Took: 568 milliseconds, at 2018-1-19 4:1"}]},{"metadata":{"id":"4B383828A3134D5D8985885EA237F49E"},"cell_type":"markdown","source":"## DataFrames and Datasets\n\n>  DataFrame is similar to a table in a relational database, a pandas dataframe\n  - evaluated lazily\n    - syntax errors for DataFrames are caught during the compile stage\n    - analysis errors are detected only during runtime\n  - constructed from a wide array of sources, such as structured data files, Hive tables, databases, or RDD\n    - source data can be read from local filesystems, HDFS, Amazon S3, and RDBMSs.\n "},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6D8A9E93B5F941E28DA982E7E4D63442"},"cell_type":"code","source":"case class RestClass(id: String, name: String, street: String, city: String, phone: String)","outputs":[{"name":"stdout","output_type":"stream","text":"defined class RestClass\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":88,"time":"Took: 356 milliseconds, at 2018-1-19 4:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"C4EF444634404E1ABA5CDFF627B04BE2"},"cell_type":"code","source":"val rest1DS = sc.textFile(\"zagats.csv\")\n                .map(_.split(\",\"))\n                .map(x => RestClass(\n                  x(0).trim, \n                  x(1).trim, \n                  x(2).trim, \n                  x(3).trim, \n                  x(4).trim))\n                .toDS()","outputs":[{"name":"stdout","output_type":"stream","text":"rest1DS: org.apache.spark.sql.Dataset[RestClass] = [id: string, name: string ... 3 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":89,"time":"Took: 620 milliseconds, at 2018-1-19 4:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"274B252B96EF46778BE8D18A395658E4"},"cell_type":"code","source":"rest1DS.show()","outputs":[{"name":"stdout","output_type":"stream","text":"+---+--------------------+--------------------+------------------+------------+\n| id|                name|              street|              city|       phone|\n+---+--------------------+--------------------+------------------+------------+\n| id|                name|                addr|              city|       phone|\n|  1|    'apple pan  the'|'10801 w. pico bl...|         'west la'|310-475-3585|\n|  2|       'asahi ramen'|'2027 sawtelle bl...|         'west la'|310-479-2231|\n|  3|        'baja fresh'|   '3345 kimber dr.'|'westlake village'|805-498-4049|\n|  4|    'belvedere  the'|'9882 little sant...|   'beverly hills'|310-788-2306|\n|  5|  'benita\\'s frites'|'1433 third st. p...|    'santa monica'|310-458-2889|\n|  6|        'bernard\\'s'|  '515 s. olive st.'|     'los angeles'|213-612-1580|\n|  7|         'bistro 45'| '45 s. mentor ave.'|          pasadena|818-795-2478|\n|  8|     'brent\\'s deli'|'19565 parthenia ...|        northridge|818-886-5679|\n|  9|'brighton coffee ...| '9600 brighton way'|   'beverly hills'|310-276-7732|\n| 10|'bristol farms ma...|'1570 rosecrans a...|          pasadena|310-643-5229|\n| 11|          'bruno\\'s'|'3838 centinela a...|       'mar vista'|310-397-5703|\n| 12|        'cafe \\'50s'| '838 lincoln blvd.'|            venice|310-399-1955|\n| 13|        'cafe blanc'|'9777 little sant...|   'beverly hills'|310-888-0108|\n| 14|        'cassell\\'s'| '3266 w. sixth st.'|                la|213-480-8668|\n| 15|      'chez melange'|          '1716 pch'|   'redondo beach'|310-540-1222|\n| 16|           diaghilev|'1020 n. san vice...|    'w. hollywood'|310-854-1111|\n| 17|    'don antonio\\'s'|'1136 westwood bl...|          westwood|310-209-1422|\n| 18|           'duke\\'s'| '8909 sunset blvd.'|    'w. hollywood'|310-652-3100|\n| 19|      'falafel king'| '1059 broxton ave.'|          westwood|310-208-4444|\n+---+--------------------+--------------------+------------------+------------+\nonly showing top 20 rows\n\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":90,"time":"Took: 731 milliseconds, at 2018-1-19 4:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"21355ECD84DC43208261A6E49C427EBB"},"cell_type":"code","source":"val rest2DS = sc.textFile(\"fodors.csv\")\n                .map(_.split(\",\"))\n                .map(x => RestClass(\n                  x(0).trim, \n                  x(1).trim, \n                  x(2).trim, \n                  x(3).trim, \n                  x(4).trim))\n                .toDS()","outputs":[{"name":"stdout","output_type":"stream","text":"rest2DS: org.apache.spark.sql.Dataset[RestClass] = [id: string, name: string ... 3 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":91,"time":"Took: 612 milliseconds, at 2018-1-19 4:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"6265FB11996F4A148EB778995B3D5AC7"},"cell_type":"code","source":"rest2DS.show()","outputs":[{"name":"stdout","output_type":"stream","text":"+---+--------------------+--------------------+---------------+------------+\n| id|                name|              street|           city|       phone|\n+---+--------------------+--------------------+---------------+------------+\n| id|                name|                addr|           city|       phone|\n|534|'arnie morton\\'s ...|'435 s. la cieneg...|  'los angeles'|310/246-1501|\n|535|'art\\'s delicates...|'12224 ventura bl...|  'studio city'|818/762-1221|\n|536|     'hotel bel-air'|'701 stone canyon...|      'bel air'|310/472-1211|\n|537|        'cafe bizou'|'14016 ventura bl...| 'sherman oaks'|818/788-3536|\n|538|           campanile|'624 s. la brea a...|  'los angeles'|213/938-1447|\n|539|   'chinois on main'|     '2709 main st.'| 'santa monica'|310/392-9025|\n|540|              citrus| '6703 melrose ave.'|  'los angeles'|213/857-0034|\n|541|               fenix|'8358 sunset blvd...|      hollywood|213/848-6677|\n|542|             granita|'23725 w. malibu ...|         malibu|310/456-0488|\n|543|'grill on the alley'|   '9560 dayton way'|  'los angeles'|310/276-0615|\n|544|  'restaurant katsu'|'1972 n. hillhurs...|  'los angeles'|213/665-1891|\n|545|      'l\\'orangerie'|'903 n. la cieneg...|  'los angeles'|310/652-9770|\n|546|     'le chardonnay'| '8284 melrose ave.'|  'los angeles'|213/655-8880|\n|547|    'locanda veneta'|           '3rd st.'|  'los angeles'|310/274-1893|\n|548|           matsuhisa|'129 n. la cieneg...|'beverly hills'|310/659-9639|\n|549|          'the palm'|'9001 santa monic...|  'los angeles'|310/550-8811|\n|550|              patina| '5955 melrose ave.'|  'los angeles'|213/467-1108|\n|551|'philippe\\'s the ...|'1001 n. alameda ...|  'los angeles'|213/628-3781|\n|552|      'pinot bistro'|'12969 ventura bl...|  'los angeles'|818/990-0500|\n+---+--------------------+--------------------+---------------+------------+\nonly showing top 20 rows\n\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":92,"time":"Took: 643 milliseconds, at 2018-1-19 4:22"}]},{"metadata":{"id":"D5D671C35CF74B458261DBA91762F22F"},"cell_type":"markdown","source":"#### then define a UDF to clean up and transform phone numbers in the second Dataset to match the format in the first file:"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"8CA8BB8D0E92449A833C3B106F9E3E24"},"cell_type":"code","source":"def formatPhoneNo(s: String): String = s match {\n  case s if s.contains(\"/\") => s.replaceAll(\"/\", \"-\").replaceAll(\"- \", \"-\").replaceAll(\"--\", \"-\") \n  case _ => s \n} ","outputs":[{"name":"stdout","output_type":"stream","text":"formatPhoneNo: (s: String)String\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":93,"time":"Took: 430 milliseconds, at 2018-1-19 4:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"282DB94A3972462A9CD2EDF383F2485A"},"cell_type":"code","source":"val udfStandardizePhoneNos = udf[String, String]( x => formatPhoneNo(x) ) ","outputs":[{"name":"stdout","output_type":"stream","text":"udfStandardizePhoneNos: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,StringType,Some(List(StringType)))\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":94,"time":"Took: 1 second 509 milliseconds, at 2018-1-19 4:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"56719B21E42A444FA016FCA501048F73"},"cell_type":"code","source":"val rest2DSM1 = rest2DS.withColumn(\"stdphone\", udfStandardizePhoneNos(rest2DS.col(\"phone\")))","outputs":[{"name":"stdout","output_type":"stream","text":"rest2DSM1: org.apache.spark.sql.DataFrame = [id: string, name: string ... 4 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":95,"time":"Took: 422 milliseconds, at 2018-1-19 4:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"1DB50095AB664BA4862B30515AD4D95A"},"cell_type":"code","source":"rest2DSM1.show()","outputs":[{"name":"stdout","output_type":"stream","text":"+---+--------------------+--------------------+---------------+------------+------------+\n| id|                name|              street|           city|       phone|    stdphone|\n+---+--------------------+--------------------+---------------+------------+------------+\n| id|                name|                addr|           city|       phone|       phone|\n|534|'arnie morton\\'s ...|'435 s. la cieneg...|  'los angeles'|310/246-1501|310-246-1501|\n|535|'art\\'s delicates...|'12224 ventura bl...|  'studio city'|818/762-1221|818-762-1221|\n|536|     'hotel bel-air'|'701 stone canyon...|      'bel air'|310/472-1211|310-472-1211|\n|537|        'cafe bizou'|'14016 ventura bl...| 'sherman oaks'|818/788-3536|818-788-3536|\n|538|           campanile|'624 s. la brea a...|  'los angeles'|213/938-1447|213-938-1447|\n|539|   'chinois on main'|     '2709 main st.'| 'santa monica'|310/392-9025|310-392-9025|\n|540|              citrus| '6703 melrose ave.'|  'los angeles'|213/857-0034|213-857-0034|\n|541|               fenix|'8358 sunset blvd...|      hollywood|213/848-6677|213-848-6677|\n|542|             granita|'23725 w. malibu ...|         malibu|310/456-0488|310-456-0488|\n|543|'grill on the alley'|   '9560 dayton way'|  'los angeles'|310/276-0615|310-276-0615|\n|544|  'restaurant katsu'|'1972 n. hillhurs...|  'los angeles'|213/665-1891|213-665-1891|\n|545|      'l\\'orangerie'|'903 n. la cieneg...|  'los angeles'|310/652-9770|310-652-9770|\n|546|     'le chardonnay'| '8284 melrose ave.'|  'los angeles'|213/655-8880|213-655-8880|\n|547|    'locanda veneta'|           '3rd st.'|  'los angeles'|310/274-1893|310-274-1893|\n|548|           matsuhisa|'129 n. la cieneg...|'beverly hills'|310/659-9639|310-659-9639|\n|549|          'the palm'|'9001 santa monic...|  'los angeles'|310/550-8811|310-550-8811|\n|550|              patina| '5955 melrose ave.'|  'los angeles'|213/467-1108|213-467-1108|\n|551|'philippe\\'s the ...|'1001 n. alameda ...|  'los angeles'|213/628-3781|213-628-3781|\n|552|      'pinot bistro'|'12969 ventura bl...|  'los angeles'|818/990-0500|818-990-0500|\n+---+--------------------+--------------------+---------------+------------+------------+\nonly showing top 20 rows\n\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":96,"time":"Took: 734 milliseconds, at 2018-1-19 4:22"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"9019A3453F734EBE8E8EBE6F619D9191"},"cell_type":"code","source":"rest1DS.createOrReplaceTempView(\"rest1Table\") \n\nrest2DSM1.createOrReplaceTempView(\"rest2Table\")\n","outputs":[{"name":"stdout","output_type":"stream","text":"<console>:105: error: not found: value rest1Table\n              rest1Table\n              ^\n"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"8C4E868866714FB9BF806A34720844FA"},"cell_type":"code","source":"spark.sql(\"SELECT count(*) from rest1Table, rest2Table where rest1Table.phone = rest2Table.stdphone\").show()","outputs":[{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":66,"time":"Took: 702 milliseconds, at 2018-1-19 4:5"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"CC41FA931107420A87085E0C19B3071D"},"cell_type":"code","source":"val sqlDF = spark.sql(\"SELECT a.name, b.name, a.phone, b.stdphone from rest1Table a, rest2Table b where a.phone = b.stdphone\")","outputs":[{"name":"stdout","output_type":"stream","text":"sqlDF: org.apache.spark.sql.DataFrame = [name: string, name: string ... 2 more fields]\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":62,"time":"Took: 408 milliseconds, at 2018-1-19 4:3"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"8EC765C692A240619EF958CD4B0E5AD1"},"cell_type":"code","source":"sqlDF.show()","outputs":[{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":64,"time":"Took: 734 milliseconds, at 2018-1-19 4:5"}]}],"nbformat":4}